openapi: 3.1.0
info:
  title: Movies API
  version: 1.0.0
  description: API for managing movies
servers:
  - url: http://localhost:3000
    description: Local development server
  - url: https://api.myapp.com
    description: Production server
components:
  schemas:
    CreateMovieRequest:
      type: object
      properties:
        id:
          type: number
          description: Movie ID
          example: 1
        name:
          type: string
          minLength: 1
          description: Movie name
          example: Inception
        year:
          type: integer
          minimum: 1900
          maximum: 2024
          description: Release year
          example: 2010
      required:
        - name
        - year
    CreateMovieResponse:
      type: object
      properties:
        status:
          type: integer
          description: Response status code
          example: 200
        error:
          type: string
          description: Error message, if any
        movie:
          type:
            - object
            - "null"
          properties:
            id:
              type: number
              description: Movie ID
              example: 1
            name:
              type: string
              description: Movie name
              example: Inception
            year:
              type: number
              description: Release year
              example: 2010
          required:
            - id
            - name
            - year
          description: Movie data or null
      required:
        - status
    GetMovieResponse:
      anyOf:
        - type: object
          properties:
            id:
              type: number
            name:
              type: string
            year:
              type: number
          required:
            - id
            - name
            - year
        - type: array
          items:
            type: object
            properties:
              id:
                type: number
              name:
                type: string
              year:
                type: number
            required:
              - id
              - name
              - year
        - type: "null"
    GetMovieNotFound:
      type: object
      properties:
        status:
          type: integer
          description: Response status code
          example: 404
        error:
          type: string
          description: Error message
          example: Movie not found
      required:
        - status
        - error
    DeleteMovieMessage:
      type: object
      properties:
        message:
          type: string
          example: Movie {id} has been deleted
      required:
        - message
  parameters: {}
paths:
  /:
    get:
      summary: Health check
      responses:
        "200":
          description: Server is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server is running
  /movies:
    get:
      summary: Get all movies
      description: Retrieve a list of all movies
      responses:
        "200":
          description: List of movies
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMovieResponse"
    post:
      summary: Create a new movie
      description: Create a new movie in the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMovieRequest"
      responses:
        "200":
          description: Movie created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateMovieResponse"
        "400":
          description: Invalid request body or validation error
        "409":
          description: Movie already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Conflict status code
                    example: 409
                  error:
                    type: string
                    description: Error message
                    example: Movie already exists
                required:
                  - status
                  - error
        "500":
          description: Unexpected error occurred
  /movie/{id}:
    delete:
      summary: Delete a movie by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Movie ID
      responses:
        "200":
          description: Movie {id} has been deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteMovieMessage"
        "404":
          description: Movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Response status code
                    example: 404
                  error:
                    type: string
                    description: Error message
                    example: Movie not found
                required:
                  - status
                  - error
webhooks: {}
