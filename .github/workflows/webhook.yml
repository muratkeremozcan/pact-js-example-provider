name: Webhook-triggered Provider Contract Test

# read https://dev.to/muratkeremozcan/-streamlining-pact-verification-in-cicd-with-github-actions-extracting-consumer-branch-names-and-dynamic-provider-testing-22g4

on:
  repository_dispatch:
    types:
      - contract_requiring_verification_published

concurrency:
  group: ${{ github.ref }} && ${{ github.workflow }}
  cancel-in-progress: true

env:
  PACT_PAYLOAD_URL: ${{ github.event.client_payload.pact_url }}
  PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_BASE_URL }}
  PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}
  GITHUB_REPO_OWNER: 'muratkeremozcan'
  GITHUB_REPO_NAME: 'pact-js-example-provider'
  DATABASE_URL: 'file:./dev.db'
  PORT: 3001

jobs:
  verify_pact:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Log Payload Variables
      # This step logs the initial variables received from the event payload.
      # It's useful for debugging and ensuring variables are correctly passed.
      - name: Log Payload Variables
        run: |
          echo "PACT_PAYLOAD_URL: ${{ env.PACT_PAYLOAD_URL }}"
          echo "GITHUB_SHA: ${{ github.event.client_payload.sha }}"
          echo "GITHUB_BRANCH: ${{ github.event.client_payload.branch }}"
          echo "PACT_BROKER_BASE_URL: ${{ env.PACT_BROKER_BASE_URL }}"

      # Step 2: Install jq
      # jq is a lightweight and flexible command-line JSON processor.
      # We use it to parse JSON responses from the Pact Broker.
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      # Step 3: Extract consumer branch name
      # This step fetches the consumer's branch name from the Pact Broker
      # and sets CONSUMER_BRANCH environment variable for use in subsequent steps.
      - name: Extract consumer branch name and set PACT_BREAKING_CHANGE
        shell: bash
        env:
          PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}
          PACT_PAYLOAD_URL: ${{ env.PACT_PAYLOAD_URL }}
        run: |
          echo "Starting extraction of consumer branch name from Pact Broker..."

          # Fetch the pact JSON from the Pact Broker using the PACT_PAYLOAD_URL
          PACT_JSON=$(curl -s -H "Authorization: Bearer $PACT_BROKER_TOKEN" "$PACT_PAYLOAD_URL")

          # Extract the consumer version URL from the pact JSON using jq
          CONSUMER_VERSION_URL=$(echo "$PACT_JSON" | jq -r '._links."pb:consumer-version".href')
          echo "DEBUG: Consumer Version URL: $CONSUMER_VERSION_URL"

          # Fetch the consumer version JSON
          CONSUMER_VERSION_JSON=$(curl -s -H "Authorization: Bearer $PACT_BROKER_TOKEN" "$CONSUMER_VERSION_URL")

          echo "DEBUG: Looking for branch information in multiple locations..."

          # Try to extract branch name from different possible locations
          BRANCH_FROM_METADATA=$(echo "$CONSUMER_VERSION_JSON" | jq -r '.metadata.branch // empty')
          echo "DEBUG: Branch from metadata: $BRANCH_FROM_METADATA"

          BRANCH_FROM_TAGS=$(echo "$CONSUMER_VERSION_JSON" | jq -r '._embedded.tags[].name | select(contains("branch-")) // empty' | head -n1)
          echo "DEBUG: Branch from tags: $BRANCH_FROM_TAGS"

          BRANCH_FROM_BRANCHES=$(echo "$CONSUMER_VERSION_JSON" | jq -r '._embedded.branchVersions[].name // empty' | head -n1)
          echo "DEBUG: Branch from branchVersions: $BRANCH_FROM_BRANCHES"

          # Try to get branch from version number if it contains branch information
          VERSION_NUMBER=$(echo "$CONSUMER_VERSION_JSON" | jq -r '.number // empty')
          echo "DEBUG: Version number: $VERSION_NUMBER"

          # Determine the branch name using the following priority:
          # 1. Branch from metadata
          # 2. Branch from tags
          # 3. Branch from branchVersions
          # 4. Default to 'main'
          if [ ! -z "$BRANCH_FROM_METADATA" ]; then
            CONSUMER_BRANCH="$BRANCH_FROM_METADATA"
            echo "DEBUG: Using branch from metadata"
          elif [ ! -z "$BRANCH_FROM_TAGS" ]; then
            CONSUMER_BRANCH="${BRANCH_FROM_TAGS#branch-}"  # Remove 'branch-' prefix if present
            echo "DEBUG: Using branch from tags"
          elif [ ! -z "$BRANCH_FROM_BRANCHES" ]; then
            CONSUMER_BRANCH="$BRANCH_FROM_BRANCHES"
            echo "DEBUG: Using branch from branchVersions"
          else
            CONSUMER_BRANCH="main"
            echo "DEBUG: No branch found in any location, defaulting to 'main'"
          fi

          echo "DEBUG: Selected consumer branch: $CONSUMER_BRANCH"

          # Determine if it's a breaking change
          if [[ "${CONSUMER_BRANCH,,}" == *"breaking"* && "${CONSUMER_BRANCH,,}" != "main" ]]; then
            echo "DEBUG: Setting PACT_BREAKING_CHANGE=true"
            echo "PACT_BREAKING_CHANGE=true" >> $GITHUB_ENV
            echo "Breaking change detected in branch: $CONSUMER_BRANCH"
          else
            echo "DEBUG: Setting PACT_BREAKING_CHANGE=false"
            echo "PACT_BREAKING_CHANGE=false" >> $GITHUB_ENV
            echo "No breaking change detected in branch: $CONSUMER_BRANCH"
          fi

          # Set the branch name in the environment
          echo "CONSUMER_BRANCH=$CONSUMER_BRANCH" >> $GITHUB_ENV

          # Final debug output
          echo "Final state:"
          echo "- Consumer Branch: $CONSUMER_BRANCH"
          echo "- PACT_BREAKING_CHANGE: $(cat $GITHUB_ENV | grep 'PACT_BREAKING_CHANGE' | cut -d'=' -f2)"

      # Step 4: Checkout code using actions/checkout
      # We use actions/checkout to clone the repository and fetch all branches.
      - uses: actions/checkout@v4
        with:
          # Fetch all branches and history so we can switch branches
          fetch-depth: 0
          # Specify the repository to check out
          repository: ${{ env.GITHUB_REPO_OWNER }}/${{ env.GITHUB_REPO_NAME }}

      # Step 5: Checkout matching branch or default to main
      # Attempts to checkout the branch that matches the consumer branch.
      # If it doesn't exist in the provider repo, defaults to 'main'.
      - name: Checkout matching branch or default to main
        shell: bash
        run: |
          # Fetch all remote branches
          git fetch --all
          # Check if the branch exists in the remote repository
          if git ls-remote --exit-code --heads origin "${CONSUMER_BRANCH}"; then
            echo "Branch '${CONSUMER_BRANCH}' exists in the remote repository."
            git checkout "${CONSUMER_BRANCH}"
            echo "GITHUB_BRANCH=${CONSUMER_BRANCH}" >> $GITHUB_ENV
          else
            echo "Branch '${CONSUMER_BRANCH}' does not exist in the remote repository. Using 'main' branch."
            git checkout main
            echo "GITHUB_BRANCH=main" >> $GITHUB_ENV
          fi

      # Step 6: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 7: Run provider tests
      # Executes the provider tests using the test:provider-ci script.
      # Environment variables are set for use within the test scripts.
      - name: Run provider tests
        env:
          PACT_PAYLOAD_URL: ${{ env.PACT_PAYLOAD_URL }}
          PACT_BROKER_BASE_URL: ${{ env.PACT_BROKER_BASE_URL }}
          PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}
          GITHUB_SHA: ${{ github.event.client_payload.sha }}
          GITHUB_BRANCH: ${{ env.GITHUB_BRANCH }}
          DATABASE_URL: ${{ env.DATABASE_URL }}
          PORT: ${{ env.PORT }}
          PACT_BREAKING_CHANGE: ${{ env.PACT_BREAKING_CHANGE }}
        run: |
          echo "Running provider contract tests with PACT_BREAKING_CHANGE=$PACT_BREAKING_CHANGE"
          npm run test:provider-ci
