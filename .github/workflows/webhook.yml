# This workflow is triggered by a webhook when the consumer publishes a pact.
# It runs the provider's contract tests to verify the new pact.

name: Provider Contract Tests

on:
  repository_dispatch: # A repository_dispatch in GitHub is a HTTP request to your GitHub project instructing GitHub to start any action or webhook
    types:
      - contract_requiring_verification_published

# Ensure that only one instance of the workflow runs per branch and workflow.
concurrency:
  group: ${{ github.ref }} && ${{ github.workflow }}
  cancel-in-progress: true

env:
  # The URL of the Pact payload provided by the consumer's webhook.
  PACT_PAYLOAD_URL: ${{ github.event.client_payload.pact_url }}
  # Base URL of the Pact Broker.
  PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_BASE_URL }}
  # Authentication token for the Pact Broker.
  PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}
  # Commit SHA from the consumer's webhook payload (for logging purposes).
  GITHUB_SHA: ${{ github.event.client_payload.sha }}
  # Branch name from the consumer's webhook payload.
  GITHUB_BRANCH: ${{ github.event.client_payload.branch }}
  # Database URL for the provider service.
  DATABASE_URL: 'file:./dev.db'
  # Port for the provider service.
  PORT: 3001

jobs:
  verify_pact:
    runs-on: ubuntu-latest
    env:
      # Set initial environment variables from the webhook payload.
      PACT_PAYLOAD_URL: ${{ github.event.client_payload.pact_url }}
      PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_BASE_URL }}
      PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}
      # Initialize GITHUB_BRANCH to 'main' by default.
      GITHUB_BRANCH: main
      # Database URL for the provider service.
      DATABASE_URL: 'file:./dev.db'
      # Port for the provider service.
      PORT: 3001
      # Node version.
      NODE_VERSION: 20

    steps:
      # Step 1: Log the payload variables for debugging and verification.
      - name: Log Payload Variables
        run: |
          echo "PACT_PAYLOAD_URL: ${{ env.PACT_PAYLOAD_URL }}"
          echo "GITHUB_SHA: ${{ github.event.client_payload.sha }}"
          echo "GITHUB_BRANCH: ${{ github.event.client_payload.branch }}"

      # Step 2: Checkout the repository (default to main branch).
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 3: Extract the consumer's branch name from the Pact Broker API.
      - name: Extract consumer branch name
        shell: bash
        env:
          PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}
          PACT_PAYLOAD_URL: ${{ env.PACT_PAYLOAD_URL }}
        run: |
          echo "Fetching consumer branch from Pact Broker..."
          # Fetch the pact details from the Pact Broker.
          PACT_JSON=$(curl -s -H "Authorization: Bearer $PACT_BROKER_TOKEN" "$PACT_PAYLOAD_URL")
          # Extract the consumer version URL.
          CONSUMER_VERSION_URL=$(echo "$PACT_JSON" | jq -r '._links."pb:consumer-version".href')
          # Fetch the consumer version details.
          CONSUMER_VERSION_JSON=$(curl -s -H "Authorization: Bearer $PACT_BROKER_TOKEN" "$CONSUMER_VERSION_URL")
          # Extract the branch name.
          CONSUMER_BRANCH=$(echo "$CONSUMER_VERSION_JSON" | jq -r '.branch')
          echo "Consumer branch extracted: $CONSUMER_BRANCH"
          # Save the consumer branch to the environment.
          echo "CONSUMER_BRANCH=$CONSUMER_BRANCH" >> $GITHUB_ENV

      # Step 4: Check if the matching branch exists in the provider repository.
      - name: Check if matching branch exists in provider repository
        shell: bash
        run: |
          # Fetch all remote branches.
          git fetch --all
          # Check if the branch exists.
          if git show-ref --verify --quiet refs/heads/"${CONSUMER_BRANCH}"; then
            echo "Branch '${CONSUMER_BRANCH}' exists in provider repository."
            echo "BRANCH_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Branch '${CONSUMER_BRANCH}' does not exist in provider repository."
            echo "BRANCH_EXISTS=false" >> $GITHUB_ENV
          fi

      # Step 5: Checkout the matching branch if it exists.
      - name: Checkout matching branch
        if: env.BRANCH_EXISTS == 'true'
        uses: actions/checkout@v3
        with:
          ref: ${{ env.CONSUMER_BRANCH }}

      # Step 6: Handle the case where the matching branch doesn't exist.
      - name: Handle missing branch
        if: env.BRANCH_EXISTS == 'false'
        run: |
          echo "No matching branch found in provider repository."
          # Optionally, you can fail the workflow here.
          # exit 1

      # Step 7: Set GITHUB_BRANCH environment variable to the checked-out branch.
      - name: Set GITHUB_BRANCH environment variable
        run: echo "GITHUB_BRANCH=${{ env.CONSUMER_BRANCH }}" >> $GITHUB_ENV
        if: env.BRANCH_EXISTS == 'true'

      # Step 8: Install Dependencies.
      - name: Install dependencies
        run: npm ci

      # Step 9: Run Provider Tests.
      - name: Run provider tests
        run: npm run test:provider-ci
